
      The Temple Operating System hosted in VirtualBox for NOVA

TempleOS is a free, public domain, open source, x86_64, non-preemptive
multi-tasking, multi-cored, ring-0-only, single-address-map (identity-mapped),
non-networked, PC operating system.  Paging is, basically, not used.

The CIA encourages code obsfucation.  They make it more complicated than
necessary.  TempleOS is, literally, more simple than necessary.  It is
obnoxiously simple... to the point it hurts.

This "Hello World" joke, the BMP file format and the WAV file format show that
the industry is really screwed-up!  That's what TempleOS fixes.  I capped the
line-of-code count at 100,000 and God said it must be perfect, so it will never
be an ugly monstrocity.  It is currently 82,171 lines of unblemished code.
Backward compatibility is not promised.

Normally, failure is not an option, but since TempleOS accompanies Windows or
Linux, we exclude certain uses.  There is no reason to duplicate browsing,
multimedia, desktop publishing, etc.  Linux wants to be a secure, multi-user
mainframe.  That's why it has file permissions.  The vision for TempleOS,
however, is a modern, 64-bit Commodore 64.  The C64 was a non-networked, home
computer mostly used for games.  It trained my generation how to program because
it was wide open, completely hackable.  The games were not multimedia works of
art, but generated by non-artist.

A troll might ask, "Why not just use DOS?  It was ring-0-only and
single-address-map."  DOS was 16-bit, with segmentation -- awful!  TempleOS is
64-bit, flat, non-segmented and multi-cored.  It has a C64-like shell with
HolyC, a dialect of C/C++, instead of BASIC.  It was written from scratch, and
not even ASCII was sacred -- it has 8-bit unsigned char source code to support
European languages.  Also, the source code supports binary sprite graphics.

A troll might say, "It can crash!"  We used DOS for years and loved it.
Computers even had a reset switch!  Just think of the power of ring-0, muhahaha!
Think of the speed and simplicity of ring-0-only and identity-mapping.  It can
change tasks in half a microsecond because it doesn't mess with page tables or
privilege levels.  Inter-process communication is effortless because every task
can access every other task's memory.

It's fun having access to everything.  When I was a teenager, I had a book,
Mapping the Commodore 64, that told what every location in memory did.  I liked
copying the ROM to RAM and poking around at the ROM BASIC's variables.
Everybody directly poked the hardware ports.

TempleOS is simpler than Linux and you can have hours of fun tinkering because
all memory and ports are accessible.  Memory is identity-mapped at all times, so
you can modify any task's memory from any other task.  You can access all disk
blocks, too.  I had a blast using a C64 disk block editor to modify directories
to un-delete files, when I was a kid.  Maybe, you want to play with a raw-block
database, or make your own file system?

http://www.templeos.org/
https://archive.org/details/TempleOS_Website_Archive
