
	This is initial port of golang to genode
	========================================
This work is a side result of one of the research project made in Innopolis University.
	(c) Alex Tormasov, tor@innopolis.ru - port itsels, Alexey Semenov aleks.semenov@innopolis.ru - build
	covered mostly by BSD-like license (see appropriate files)

It allow compilation and execution of simple go applications/packages (without unsupported OS/platform features).
In this moment it supports linux, foc, nova and sel4 kernels on x86_64 platform, and foc, hw on arm64 (arm v8a) platform.
(Checked with linux/linux, foc/pc, nova/pc as x86_64; hw/virt_qemu_arm_v8a, foc/rpi3  as arm64 as for now on 22.11)

I use only gccgo version of golang compiler (gcc 10.3). Other limitations see below.

It build a set of libraries, from world repo, as static ones.
Also it build a set of standard golang packages (namely fmt, os, syscall, runtime/etc) as files for gccgo compilation.
Note: Go runtinme support around 11 systems as backend. I use netbsd as simplest one as the prototype for new system - "genode".

To implement context switching I have to port it from the glibc (but use makecontext from genode FreeBSD port, so, to use
you need to fill mc_len field before call to makecontext() on x86_64); for arm64 I have to combine libc and glibc code;
for stack it use alloc_secondary_stack() from Genode.

	Installation instruction
	========================
0. setup genode on appropriate platform using https://github.com/tor-m6/genode-world.git, 
configure toolchain and prepare  code to compile, setup environment, e.g. (replace by your own dirs):
#!/bin/sh
ARCH=aarch64
PARCH=arm_v8a
#ARCH=x86
#PARCH=x86_64
export GOC=genode-$ARCH-gccgo
export GDB=genode-$ARCH-gdb
export CXX=genode-$ARCH-c++
export LD=genode-$ARCH-ld
export READELF=genode-$ARCH-readelf
export AR=genode-$ARCH-ar
export AS=genode-$ARCH-as
export NM=genode-$ARCH-gcc-nm
export GCC=genode-$ARCH-gcc
export OBJCOPY=genode-$ARCH-objcopy
export STRIP=genode-$ARCH-strip
export OBJDUMP=genode-$ARCH-objdump
export PATH=/usr/local/genode/tool/current/bin:<your genode dir>/build/$PARCH/lib/libgo:$PATH
export CC=genode-$ARCH-gcc
export RANLIB=genode-$ARCH-ranlib
	execute file above like '. pathes.sh'
	correct if need begining of build/x86_64/etc/build.conf and uncomment 
	libports, ports, world, dde_ipxe, dde_linux repos inside:
	GENODE_DIR  := <your genode dir>
	BASE_DIR    := $(GENODE_DIR)/repos/base
	CONTRIB_DIR := $(GENODE_DIR)/contrib

	...
   and finally cd to genode dir
1. prepare ports from genode for apropriate targets, e.g. by
	./tool/ports/prepare_port libc nova stdcxx grub2
2. prepare ports to build golang libgo from gcc distirbution
	./tool/ports/prepare_port libgo
3. build native libraries (set your own flags if need, eg -O) for genode (libgo should be the last) by
	make -C build/x86_64/ KERNEL=nova lib/libatomic
	make -C build/x86_64/ KERNEL=nova lib/libbacktrace
	make -C build/x86_64/ KERNEL=nova lib/libffi
	make -C build/x86_64/ KERNEL=nova lib/libgo
4. build and run test go application by
	make -C build/x86_64/ KERNEL=nova run/go_app

target.mk for test app:

TARGET = go_app
SRC_GO = main.go

LIBS   = base libc libm libgo libgo_support stdcxx net

CC_CXX_WARN_STRICT =
	
	Configuration after build
	=========================
Golang package (like fmt) is an object file (e.g. fmt.o) which appears in build/<arch>/lib/libgo/ directory and
subdirectories. This path should be included during golang/gccgo compilation (not only linking). Built libraries for Go
will be in ${BUILD_BASE_DIR}/lib/libgo/libgobegin.a ${BUILD_BASE_DIR}/lib/libgo/libgolibbegin.a and 
${BUILD_BASE_DIR}/lib/libgo/.libs/libgo.a. Everything included into import-libgo.mk

	Debugging
	=========
On most systems (like seL4) you can use mostly debug print, and sometimes print locking (and output) is tricky.
You can use gdb to debug your application on nova using qemu stub (-s) or internal gdbserver (while gdb 
support in genode somehow limited, I found a lot of problems with improper breaks/etc); 
I use Parallels VM or qemu on Mac. To compile code for gdb please, take a look at
repos/world/run/go_app_dbg.run (outdated a bit)
(probably need to add CFLAGS like make -C build/x86_64/ KERNEL=nova CFLAGS="-g -O0" run/go_app).
Note: gdb_monitor code should not be compiled with -O0 flag (it will generate "pure function call").
For convenience I add my VSCode launch.json (to run debugger using VSCode as frontend):
        {
            "type": "gdb",
            "request": "attach",
            "name": "Attach to qemu",
            "gdbpath": "/usr/local/genode/tool/current/bin/genode-x86-gdb",
            "executable": "build/x86_64/var/libcache/ld-nova/ld-nova.lib.so",
            "target": ":5555",
            "remote": true,
            "cwd": "/var/services/homes/admin/gen/22.11",
            "autorun": [
                "set output-radix 16",
                "set solib-search-path build/x86_64/debug",
                "file build/x86_64/var/libcache/ld-nova/ld-nova.lib.so",
                "b binary_ready_hook_for_gdb",
                "c",
                "delete 1",
                "file build/x86_64/debug/test-go",
                "add-symbol-file build/x86_64/debug/ld-nova.lib.so",
                "add-symbol-file build/x86_64/debug/libc.lib.so -o 0x10dfe000",
                "add-symbol-file build/x86_64/debug/libm.lib.so -o 0x10d28000",
                "add-symbol-file build/x86_64/debug/vfs.lib.so -o 0x10d62000",
                "add-symbol-file build/x86_64/debug/stdcxx.lib.so -o 0x1310000",
                "b main",
                "sharedlibrary"
            ],
            "valuesFormatting": "parseText"
        }

Addresses like -o 0x10dfe000 you should take from log of program after first start, e.g.

[init -> gdb_monitor -> test-go]   0x1000000 .. 0x10ffffff: linker area
[init -> gdb_monitor -> test-go]   0x40000000 .. 0x4fffffff: stack area
[init -> gdb_monitor -> test-go]   0x30000 .. 0x161fff: ld.lib.so
[init -> gdb_monitor -> test-go]   0x10dfe000 .. 0x10ffffff: libc.lib.so
[init -> gdb_monitor -> test-go]   0x10d62000 .. 0x10dfdfff: vfs.lib.so
[init -> gdb_monitor -> test-go]   0x10d28000 .. 0x10d61fff: libm.lib.so
[init -> gdb_monitor -> test-go]   0x1310000 .. 0x14c7fff: stdcxx.lib.so

	IMPORTANT:
run file should contain ALL libs and binaries from above and "/proc/exe", otherwise stack unwind performed 
by golang will fail (it will say something about "deadlock ahead" inside nested exceptions).
References included into run file, as well as parameters like 'arena size' (virtual-only memory), this is 
virtual address space used, not always necessary correspond to physical RAM size (probably not significantly
less).

For network and tcp setup please take a look for go_http.run exapmple file.
In this moment it support lwip and lxip (need different setup for linux vs others, see run file).

	Current limitations
	===================
  -	tested nominally up to 4 CPU (you could setup it in go_app.run/go_http.run parameters)
  -	it works on x86_64, tested on nova, foc, linux, sel4 kernels (sel4 support for Jun 22 seems to be broken);
	genode do not have makecontex/setcontext/gencontext family while it is crucial to support because of goroutine model;
	I have to port it from FreeBSD libc. It is machine and platform-dependent;
  -	it works on ARM V8A (64 bit), tested on foc and hw kernels, probably work for others.
  -	Genode thread model closer to traditional processes than to threads; in particular, capabilities and their permisions
	allocated in one thread could became unaccessible in another while posix thread model assume that if you open something
	in one thread then it could be used in another of the same process. Genode thread binded to the stack; goroutines assume
	often changes of CPU and related thread affinity, and therefore during migration of goroutine between OS (Genode) threads we
	need to update stack content to point to correct OS thread, as well as call all system services via wrappers. 
	Seems that they already supported in golang runtime and partially in pthread Genode port in libc.
	Current implementation do rewrite stack during context switch, and do nothing with any resources (while use libc port which
	alredy does something similar and do not fail);
	!!! if you allocate/directly request resources/caps/etc from genode inside goroutine, it could fail during goroutine thread 
	!!! migration; better use "native" libc calls from genode port which take care of it
  -	during port I make a set of dirty fixes for the platform (genode/nova/foc/sel4/linux), in particular "empty" C implementaion of
	sendfile(), getpgid(), lchown(), mount(), settimeofday(), mlock(), munlock(), mlockall(), munlockall(), sigaltstack();
	See patches for libgo in repos/world/src/lib/libgo/ and dummy.cc in libgo_support. Anything in Golang which use them will fail.
	For network Genode have a limited support of options/fcntl/etc, some of them should be emulated (e.g to establish tcp socket
	golang runtime apply BROADCAST option to socket and fail if it return error, so I should return success during setsockopt)
	NB: Potentially new genode releases will contain something which can replace or fix these and other patched functions
  -	mmap support for ANON mapping implemented do not support re-map of already allocated memory outside of made by mmap alloc
  -	mmap area do not call free() during exit() - otherwise we will free memory while some theads continue running on it
  -	networking: works for at least net/http package lwip/lxip, see go_http example of http server and run file configuration

	go frontend in cross mode
	=========================
Standard way of golang usage is a "go" driver/frontend utilizaton, see "go build" and other instruction. Problem that it by default
support own compiler as well as gccgo. In genode we do have gccgo only, and standard frontend in theory can support it.
In practice, I have to build own version of frontend (call it genode-go) and force creation of own tricky combination of genode tools
references and build libgo objects (packages) where I point standard variable GCC_EXEC_PREFIX. It stored inside build goroot in /toolchain.
Current version is 1.17

To use genode-go host frontend you need
0. build libgo (see above)
1. prepare port goroot
2. update src/app/goroot/target.mk of it for appropriate GOARCH and build it in usual way like "make app/goroot"
   (this step will generate host application genode-go, not genode one!)
3. add goroot/bin into PATH (eg like /var/services/homes/admin/gen/22.11/build/arm_v8a/app/goroot/bin)

Then you can use package build targets of genode (it will utilize genode-go as a toolchain part), see test/go_pkgs as a sample.
In src/test/go_pkgs/target.mk you can turn on executed commands print if need GOBUILD_VERBOSE := -x. 
go_pkgs example supports 2 mode - just a set of .go files as a single programm and a directory with .go files as a package.
In first case you need to define SRC_GO_PKG with a list of files, in the second to the name of package like github.com/blabla/bla.
It downloads packages via "genode-go get" and work with modules.

I do not test genode-go host frontend for anything outside of this example, and still not all package/module staff clear for me.

Questions? tor@innopolis.ru - related to port (and Alexey Semenov aleks.semenov@innopolis.ru - related to build process).
Origin in https://github.com/tor-m6/genode-world.git

