
assert {![have_board linux]}

build {
	core lib/ld init timer
	lib/libc lib/vfs lib/libm lib/posix lib/stdcxx lib/gmock lib/gtest
	driver/rtc
	server/vfs
	test/gmock
}

create_boot_directory

install_config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="RM"/>
		<service name="PD"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="IO_PORT"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="pc_rtc">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Rtc"/> </provides>
	</start>

	<start name="ram_fs">
		<resource name="RAM" quantum="4M"/>
		<binary name="vfs"/>
		<provides> <service name="File_system"/> </provides>
		<config>
			<vfs> <ram/> </vfs>
			<policy label_prefix="gmock ->" root="/" writeable="yes" />
		</config>
	</start>

	<start name="gmock" caps="200">
		<resource name="RAM" quantum="4M"/>
		<config>
			<vfs>
				<dir name="dev"> <log/> <rtc/> </dir>
				<fs/>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc"/>
			<arg value="gmock"/>
			<arg value="--gtest_filter=-*Death*:*.*WhenVerbosityIs*:ExpectCallTest.TakesDefaultAction*:AssertTest.FailsFatally*:LogTest.*:*.LogsAnything*:*MockTest.*:*IsMandatory:*.DoesNotWarnOnAdequateActionCount:*.WarnsOn*:*.Reports*:*FunctionCallMessageTest.*:GMockVerboseFlagTest.*"/>
		</config>
	</start>
</config>}

build_boot_image [build_artifacts]

append qemu_args " -nographic "

run_genode_until {.*child "gmock" exited with exit value 0} 1000
