if {![have_spec x86_64]} {
	puts "\nSolo5 requires a 64bit architecture\n"
	exit 0
}

if {![file exists bin/mirage]} {
	puts ""
	puts "A mirage image must be provided at 'bin/mirage' to execute this scenario."
	puts ""
	exit 1
}

if {[have_board linux]} {
	puts ""
	puts "This scenario is not available for Linux."
	puts ""
	exit 1
}

create_boot_directory

import_from_depot \
	[depot_user]/src/[base_src] \
	[depot_user]/src/init \
	[depot_user]/src/ipxe_nic_drv \
	[depot_user]/src/rtc_drv \
	[depot_user]/pkg/terminal

source ${genode_dir}/repos/base/run/platform_drv.inc

set build_components {
	app/log_core
	drivers/framebuffer
	drivers/input/dummy
	lib/solo5
	server/terminal_log
}

append_platform_drv_build_components

build $build_components

set fb_drv "vesa_fb_drv"

if {[have_include "image/uefi"]} {
	set fb_drv "fb_boot_drv"
}

append config {
<config>
	<default caps="256"/>
	<parent-provides>
		<service name="CPU"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="IRQ"/>
		<service name="LOG"/>
		<service name="PD"/>
		<service name="RAM"/>
		<service name="RM"/>
		<service name="ROM"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service> </default-route>}

append_platform_drv_config

append config {
	<start name="timer" caps="96">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="nic_drv">
		<binary name="ipxe_nic_drv"/>
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nic"/></provides>
	</start>
	<start name="rtc_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Rtc"/></provides>
	</start>
	<start name="} $fb_drv {" caps="200">
		<resource name="RAM" quantum="32M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>
	<start name="dummy_input_drv">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Input"/></provides>
	</start>
	<start name="terminal">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
		<route>
			<service name="ROM" label="config"> <parent label="terminal.config"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
	<start name="terminal_log">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="LOG"/></provides>
	</start>
	<start name="log_core">
		<resource name="RAM" quantum="10M"/>
		<config period_ms="2000"/>
		<route>
			<service name="ROM" unscoped_label="log_core"> <parent/> </service>
			<service name="ROM" unscoped_label="ld.lib.so"> <parent/> </service>
			<service name="ROM" label="log"> <parent label="core_log"/> </service>
			<service name="LOG"> <child name="terminal_log" label="core_log"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
	<start name="mirage" caps="512">
		<resource name="RAM" quantum="64M"/>
		<config> <nic/> <rtc/> </config>
	</start>
</config>
}

install_config $config

append boot_modules {
	dummy_input_drv
	log_core
	terminal_log
	mirage
	solo5.lib.so
}

append boot_modules " $fb_drv"

# platform-specific modules
append_platform_drv_boot_modules

build_boot_image $boot_modules

run_genode_until forever
