#
# \brief  Seoul on Genode - for automated testing
# \author Alexander Boettcher
# \date   2013-06-11
#
# This run script starts the Seoul VMM booting from a multiboot image.
# It assumes that the module files are present at '<build-dir>/bin/'
#

assert {[have_spec x86]}
assert {[have_spec foc] || [have_spec sel4] || [have_spec nova] || [have_spec hw]}

if {[have_cmd_switch --autopilot]} {

	assert {![have_spec x86_32]} \
		"Autopilot mode is not supported on this platform."

	assert {![have_include power_on/qemu]} \
		"Autopilot mode is not supported on this platform."	

	assert {!([have_spec hw] && ![have_include power_on/qemu])} \
		"Autopilot mode is not supported on this platform."
}

set use_multiboot     0
set use_genode_iso    0
set use_model_ahci    1
set use_model_ide     0

set use_block_vdi     0
set use_block_ram     1
set use_block_sata    0

#
# The test machine in autopilot mode has a usb hid test device which
# attach/detach several times and clutters the log.
#
set use_usb           [expr ![have_cmd_switch --autopilot]]

set use_part_block    0

set use_nic_session   1

set use_top           0

set memory_vmm_vm     "512M"

set vcpus_to_be_used  2


if { [have_spec sel4] } {
	set vcpus_to_be_used  1
}

#
# Download demo image
#
set uri "http://depot.genode.org/alex-ab/images"
set image "seoul-auto-serial.img"
set image_gz "seoul-auto-serial.img.gz"
set sha1sum "d8e63259c61a9d4ec6027e9a2982378236268acd"

if {![file exists bin/$image]} {
	exec mkdir -p bin
	puts "Download file $image_gz from $uri"
	exec >& /dev/null wget -c -O bin/$image_gz $uri/$image_gz
	set sha1 [exec sha1sum bin/$image_gz]
	set sha1 [regexp -inline {[0-9a-h]+} $sha1]
	if {[string compare $sha1 $sha1sum]} {
		puts "SHA1 sum of binary does not match with expected one - abort"
		rm bin/$image_gz
		exit 1
	}
	exec gunzip bin/$image_gz
}

source ${genode_dir}/repos/world/run/seoul.inc

append qemu_args " -m 1536 "
append qemu_args " -cpu EPYC "
append_qemu_nic_args

if { [have_cmd_switch --autopilot] } {
	append qemu_args " -nographic "
	run_genode_until {\[init -\> seoul\] VMM: #   CPU: vendor_id} 60

	set timeout 100
	expect {
		-i [output_spawn_id] ".*Hello Genode world!" { puts stderr "Seoul auto test successful"; }
		timeout { puts stderr "Seoul auto test timed out" }
	}
} else {
	run_genode_until forever
}
